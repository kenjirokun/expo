{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/modal/web/utils.ts"],"names":[],"mappings":";;AAGA,kDAYC;AAED,wEAKC;AApBD,uFAAuF;AACvF,SAAgB,mBAAmB,CACjC,OAA8E;IAE9E,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,CAAC;IAC3C,OAAO,CACL,YAAY,KAAK,OAAO;QACxB,YAAY,KAAK,WAAW;QAC5B,YAAY,KAAK,iBAAiB;QAClC,YAAY,KAAK,gBAAgB;QACjC,YAAY,KAAK,kBAAkB;QACnC,YAAY,KAAK,2BAA2B,CAC7C,CAAC;AACJ,CAAC;AAED,SAAgB,8BAA8B,CAC5C,OAA8E;IAE9E,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,CAAC;IAC3C,OAAO,YAAY,KAAK,kBAAkB,IAAI,YAAY,KAAK,2BAA2B,CAAC;AAC7F,CAAC","sourcesContent":["import { ExtendedStackNavigationOptions } from '../../layouts/StackClient';\n\n// Helper to determine if a given screen should be treated as a modal-type presentation\nexport function isModalPresentation(\n  options?: Partial<Pick<ExtendedStackNavigationOptions, 'presentation'>> | null\n) {\n  const presentation = options?.presentation;\n  return (\n    presentation === 'modal' ||\n    presentation === 'formSheet' ||\n    presentation === 'fullScreenModal' ||\n    presentation === 'containedModal' ||\n    presentation === 'transparentModal' ||\n    presentation === 'containedTransparentModal'\n  );\n}\n\nexport function isTransparentModalPresentation(\n  options?: Partial<Pick<ExtendedStackNavigationOptions, 'presentation'>> | null\n) {\n  const presentation = options?.presentation;\n  return presentation === 'transparentModal' || presentation === 'containedTransparentModal';\n}\n"]}