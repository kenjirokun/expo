{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/modal/web/utils.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;AAUb,kDAYC;AAOD,wEAKC;AASD,oCAoBC;AA9DD,kDAA0B;AAI1B;;;;GAIG;AACH,SAAgB,mBAAmB,CACjC,OAA8E;IAE9E,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,CAAC;IAC3C,OAAO,CACL,YAAY,KAAK,OAAO;QACxB,YAAY,KAAK,WAAW;QAC5B,YAAY,KAAK,iBAAiB;QAClC,YAAY,KAAK,gBAAgB;QACjC,YAAY,KAAK,kBAAkB;QACnC,YAAY,KAAK,2BAA2B,CAC7C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAgB,8BAA8B,CAC5C,OAA8E;IAE9E,MAAM,YAAY,GAAG,OAAO,EAAE,YAAY,CAAC;IAC3C,OAAO,YAAY,KAAK,kBAAkB,IAAI,YAAY,KAAK,2BAA2B,CAAC;AAC7F,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,aAAqB,GAAG;IACnD,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,CAAC;IAE5C,qEAAqE;IACrE,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAEjE,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,CAAC,KAAK,IAAI,OAAO,MAAM,KAAK,WAAW;YAAE,OAAO;QAEpD,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,eAAe,UAAU,KAAK,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,CAAC,CAAsB,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAErE,iCAAiC;QACjC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE1B,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzC,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;IAExB,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["'use client';\nimport React from 'react';\n\nimport { ExtendedStackNavigationOptions } from '../../layouts/StackClient';\n\n/**\n * Helper to determine if a given screen should be treated as a modal-type presentation\n *\n * @internal\n */\nexport function isModalPresentation(\n  options?: Partial<Pick<ExtendedStackNavigationOptions, 'presentation'>> | null\n) {\n  const presentation = options?.presentation;\n  return (\n    presentation === 'modal' ||\n    presentation === 'formSheet' ||\n    presentation === 'fullScreenModal' ||\n    presentation === 'containedModal' ||\n    presentation === 'transparentModal' ||\n    presentation === 'containedTransparentModal'\n  );\n}\n\n/**\n * Helper to determine if a given screen should be treated as a transparent modal-type presentation\n *\n * @internal\n */\nexport function isTransparentModalPresentation(\n  options?: Partial<Pick<ExtendedStackNavigationOptions, 'presentation'>> | null\n) {\n  const presentation = options?.presentation;\n  return presentation === 'transparentModal' || presentation === 'containedTransparentModal';\n}\n\n/**\n * SSR-safe viewport detection: initial render always returns `false` so that\n * server and client markup match. The actual media query evaluation happens\n * after mount.\n *\n * @internal\n */\nexport function useIsDesktop(breakpoint: number = 768) {\n  const isWeb = process.env.EXPO_OS === 'web';\n\n  // Ensure server-side and initial client render agree (mobile first).\n  const [isDesktop, setIsDesktop] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (!isWeb || typeof window === 'undefined') return;\n\n    const mql = window.matchMedia(`(min-width: ${breakpoint}px)`);\n    const listener = (e: MediaQueryListEvent) => setIsDesktop(e.matches);\n\n    // Update immediately after mount\n    setIsDesktop(mql.matches);\n\n    mql.addEventListener('change', listener);\n    return () => mql.removeEventListener('change', listener);\n  }, [breakpoint, isWeb]);\n\n  return isDesktop;\n}\n"]}